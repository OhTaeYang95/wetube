"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dangerouslyDisableDefaultSrc = exports.getDefaultDirectives = void 0;
var dangerouslyDisableDefaultSrc = Symbol("dangerouslyDisableDefaultSrc");
exports.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc;
var DEFAULT_DIRECTIVES = {
  "default-src": ["'self'"],
  "base-uri": ["'self'"],
  "block-all-mixed-content": [],
  "font-src": ["'self'", "https:", "data:"],
  "frame-ancestors": ["'self'"],
  "img-src": ["'self'", "data:"],
  "object-src": ["'none'"],
  "script-src": ["'self'"],
  "script-src-attr": ["'none'"],
  "style-src": ["'self'", "https:", "'unsafe-inline'"],
  "upgrade-insecure-requests": []
};

var getDefaultDirectives = function getDefaultDirectives() {
  return Object.assign({}, DEFAULT_DIRECTIVES);
};

exports.getDefaultDirectives = getDefaultDirectives;

var dashify = function dashify(str) {
  return str.replace(/[A-Z]/g, function (capitalLetter) {
    return "-" + capitalLetter.toLowerCase();
  });
};

var isDirectiveValueInvalid = function isDirectiveValueInvalid(directiveValue) {
  return /;|,/.test(directiveValue);
};

var has = function has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

function normalizeDirectives(options) {
  var _options$directives = options.directives,
      rawDirectives = _options$directives === void 0 ? getDefaultDirectives() : _options$directives;
  var result = [];
  var directiveNamesSeen = new Set();

  for (var rawDirectiveName in rawDirectives) {
    if (!has(rawDirectives, rawDirectiveName)) {
      continue;
    }

    if (rawDirectiveName.length === 0 || /[^a-zA-Z0-9-]/.test(rawDirectiveName)) {
      throw new Error("Content-Security-Policy received an invalid directive name ".concat(JSON.stringify(rawDirectiveName)));
    }

    var directiveName = dashify(rawDirectiveName);

    if (directiveNamesSeen.has(directiveName)) {
      throw new Error("Content-Security-Policy received a duplicate directive ".concat(JSON.stringify(directiveName)));
    }

    directiveNamesSeen.add(directiveName);
    var rawDirectiveValue = rawDirectives[rawDirectiveName];
    var directiveValue = void 0;

    if (typeof rawDirectiveValue === "string") {
      directiveValue = [rawDirectiveValue];
    } else if (!rawDirectiveValue) {
      throw new Error("Content-Security-Policy received an invalid directive value for ".concat(JSON.stringify(directiveName)));
    } else if (rawDirectiveValue === dangerouslyDisableDefaultSrc) {
      if (directiveName === "default-src") {
        continue;
      } else {
        throw new Error("Content-Security-Policy: tried to disable ".concat(JSON.stringify(directiveName), " as if it were default-src; simply omit the key"));
      }
    } else {
      directiveValue = rawDirectiveValue;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = directiveValue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        if (typeof element === "string" && isDirectiveValueInvalid(element)) {
          throw new Error("Content-Security-Policy received an invalid directive value for ".concat(JSON.stringify(directiveName)));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    result.push({
      directiveName: directiveName,
      directiveValue: directiveValue
    });
  }

  if (!result.length) {
    throw new Error("Content-Security-Policy has no directives. Either set some or disable the header");
  }

  if (!directiveNamesSeen.has("default-src")) {
    throw new Error("Content-Security-Policy needs a default-src but none was provided");
  }

  return result;
}

function getHeaderValue(req, res, normalizedDirectives) {
  var result = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = normalizedDirectives[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _step2.value,
          directiveName = _step2$value.directiveName,
          rawDirectiveValue = _step2$value.directiveValue;
      var directiveValue = "";
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = rawDirectiveValue[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var element = _step3.value;

          if (element instanceof Function) {
            directiveValue += " " + element(req, res);
          } else {
            directiveValue += " " + element;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (!directiveValue) {
        result.push(directiveName);
      } else if (isDirectiveValueInvalid(directiveValue)) {
        return new Error("Content-Security-Policy received an invalid directive value for ".concat(JSON.stringify(directiveName)));
      } else {
        result.push("".concat(directiveName).concat(directiveValue));
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result.join(";");
}

var contentSecurityPolicy = function contentSecurityPolicy() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if ("loose" in options) {
    console.warn("Content-Security-Policy middleware no longer needs the `loose` parameter. You should remove it.");
  }

  if ("setAllHeaders" in options) {
    console.warn("Content-Security-Policy middleware no longer supports the `setAllHeaders` parameter. See <https://github.com/helmetjs/helmet/wiki/Setting-legacy-Content-Security-Policy-headers-in-Helmet-4>.");
  }

  ["disableAndroid", "browserSniff"].forEach(function (deprecatedOption) {
    if (deprecatedOption in options) {
      console.warn("Content-Security-Policy middleware no longer does browser sniffing, so you can remove the `".concat(deprecatedOption, "` option. See <https://github.com/helmetjs/csp/issues/97> for discussion."));
    }
  });
  var headerName = options.reportOnly ? "Content-Security-Policy-Report-Only" : "Content-Security-Policy";
  var normalizedDirectives = normalizeDirectives(options);
  return function contentSecurityPolicyMiddleware(req, res, next) {
    var result = getHeaderValue(req, res, normalizedDirectives);

    if (result instanceof Error) {
      next(result);
    } else {
      res.setHeader(headerName, result);
      next();
    }
  };
};

contentSecurityPolicy.getDefaultDirectives = getDefaultDirectives;
contentSecurityPolicy.dangerouslyDisableDefaultSrc = dangerouslyDisableDefaultSrc;
module.exports = contentSecurityPolicy;
exports["default"] = contentSecurityPolicy;